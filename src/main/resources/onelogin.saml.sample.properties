#  If 'strict' is True, then the Java Toolkit will reject unsigned
#  or unencrypted messages if it expects them signed or encrypted
#  Also will reject the messages if not strictly follow the SAML
onelogin.saml2.strict =  true

# Enable debug mode (to print errors)
onelogin.saml2.debug =  false


#  Service Provider Data that we are deploying
#

#  Identifier of the SP entity  (must be a URI)
# Keycloak\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u540d\u79f0\u3068\u3053\u306e\u5024\u3092\u305d\u308d\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002
onelogin.saml2.sp.entityid = http://localhost:8080/sso

# Specifies info about where and how the <AuthnResponse> message MUST be
#  returned to the requester, in this case our SP.
# URL Location where the <Response> from the IdP will be returned
# keycloak \u306e\u30a2\u30b5\u30a4\u30f3\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30b5\u30fc\u30d3\u30b9URL\u306b\u3082\u540c\u3058\u5024\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u3002
#\uff08\u81ea\u5206\u306e\u4f5c\u6210\u3057\u305f\u30b5\u30fc\u30d3\u30b9\u306eURL\u306b\u5408\u308f\u305b\u3066\u5909\u66f4\u3059\u308b\u3053\u3068\uff09
onelogin.saml2.sp.assertion_consumer_service.url = http://localhost:8080/sso

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-POST binding only
onelogin.saml2.sp.assertion_consumer_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST

# Specifies info about where and how the <Logout Response> message MUST be
# returned to the requester, in this case our SP.
# \u30ed\u30b0\u30a2\u30a6\u30c8\u30da\u30fc\u30b8\u3002\uff08\u81ea\u5206\u306e\u4f5c\u6210\u3057\u305f\u30b5\u30fc\u30d3\u30b9\u306eURL\u306b\u5408\u308f\u305b\u3066\u5909\u66f4\u3059\u308b\u3053\u3068\uff09
onelogin.saml2.sp.single_logout_service.url = http://localhost:8080/sso/LogoutPage

# SAML protocol binding to be used when returning the <LogoutResponse> or sending the <LogoutRequest>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Specifies constraints on the name identifier to be used to
# represent the requested subject.
# Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress

# Usually x509cert and privateKey of the SP are provided by files placed at
# the certs folder. But we can also provide them with the following parameters
# openssl \u3067\u81ea\u5206\u3067\u751f\u6210\u3057\u305fx509cert\u3092\u6539\u884c\u3068 begin\u3001end \u306e\u8a18\u8ff0\u3092\u524a\u3063\u3066\u3001\u6697\u53f7\u6587\u306e\u307f\u3053\u3053\u306b\u30bb\u30c3\u30c8\u3059\u308b\u3002
onelogin.saml2.sp.x509cert = 

# Requires Format PKCS#8   BEGIN PRIVATE KEY	     
# If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem
# \u4e0a\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b openssl \u3067\u81ea\u5206\u3067\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30ad\u30fc\u3092\u751f\u6210\u3057\u3001\u6539\u884c\u3068 begin\u3001end \u306e\u8a18\u8ff0\u3092\u524a\u3063\u3066\u3001\u6697\u53f7\u6587\u306e\u307f\u3053\u3053\u306b\u30bb\u30c3\u30c8\u3059\u308b\u3002
onelogin.saml2.sp.privatekey =  

# Identity Provider Data that we want connect with our SP
#

# Identifier of the IdP entity  (must be a URI)
# <keycloakurl>\u3068<realmname>\u3092\u81ea\u5206\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3002
onelogin.saml2.idp.entityid = https://<keycloakurl>/realms/<realmname>

# SSO endpoint info of the IdP. (Authentication Request protocol)
# URL Target of the IdP where the SP will send the Authentication Request Message
# <keycloakurl>\u3068<realmname>\u3092\u81ea\u5206\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3002
onelogin.saml2.idp.single_sign_on_service.url = https://<keycloakurl>/realms/<realmname>/protocol/saml

# SAML protocol binding to be used to deliver the <AuthnRequest> message 
# to the IdP.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_sign_on_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# SLO endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Request
# <keycloakurl>\u3068<realmname>\u3092\u81ea\u5206\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3002
onelogin.saml2.idp.single_logout_service.url = https://<keycloakurl>/realms/<realmname>/protocol/saml

# Optional SLO Response endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Response. If left blank, same URL as onelogin.saml2.idp.single_logout_service.url will be used.
# Some IdPs use a separate URL for sending a logout request and response, use this property to set the separate response url
onelogin.saml2.idp.single_logout_service.response.url = 

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Public x509 certificate of the IdP
# keycloak\u306e\u30ec\u30eb\u30e0\u3067\u751f\u6210\u3057\u305f\u8a3c\u660e\u66f8\u306e\u5024\u3092\u3053\u3053\u306b\u8a18\u8ff0\u3059\u308b\u3002(begin , end , \u6539\u884c\u306f\u30ab\u30c3\u30c8\u3059\u308b\u3002)
onelogin.saml2.idp.x509cert =

# Instead of use the whole x509cert you can use a fingerprint
# (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
# or add for example the -sha256 , -sha384 or -sha512 parameter)
#
# If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to
# let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
# 'sha1' is the default value.
# onelogin.saml2.idp.certfingerprint = 
# onelogin.saml2.idp.certfingerprint_algorithm = sha256


# Security settings
#

# Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
# will be encrypted.
onelogin.saml2.security.nameid_encrypted = false

# Indicates whether the <samlp:AuthnRequest> messages sent by this SP
# will be signed.              [The Metadata of the SP will offer this info]
onelogin.saml2.security.authnrequest_signed = false
#onelogin.saml2.security.authnrequest_signed = true

# Indicates whether the <samlp:logoutRequest> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutrequest_signed = false

# Indicates whether the <samlp:logoutResponse> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutresponse_signed = false

# Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
# <samlp:LogoutResponse> elements received by this SP to be signed.
onelogin.saml2.security.want_messages_signed = false

# Indicates a requirement for the <saml:Assertion> elements received by this SP to be signed.
onelogin.saml2.security.want_assertions_signed = false

# Indicates a requirement for the Metadata of this SP to be signed.
# Right now supported null (in order to not sign) or true (sign using SP private key) 
onelogin.saml2.security.sign_metadata =

# Indicates a requirement for the Assertions received by this SP to be encrypted
onelogin.saml2.security.want_assertions_encrypted = false

# Indicates a requirement for the NameID received by this SP to be encrypted
onelogin.saml2.security.want_nameid_encrypted = false

# Authentication context.
# Set Empty and no AuthContext will be sent in the AuthNRequest
# You can set multiple values (comma separated them)
onelogin.saml2.security.requested_authncontext = urn:oasis:names:tc:SAML:2.0:ac:classes:Password

# Allows the authn comparison parameter to be set, defaults to 'exact'
onelogin.saml2.security.onelogin.saml2.security.requested_authncontextcomparison = exact

# Allows duplicated names in the attribute statement
onelogin.saml2.security.allow_duplicated_attribute_name = false

# Indicates if the SP will validate all received xmls.
# (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).
onelogin.saml2.security.want_xml_validation = true

# Algorithm that the toolkit will use on signing process. Options:
#  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
#  'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
onelogin.saml2.security.signature_algorithm = http://www.w3.org/2001/04/xmldsig-more#rsa-sha256

# Algorithm that the toolkit will use on digest process. Options:
#  'http://www.w3.org/2000/09/xmldsig#sha1'
#  'http://www.w3.org/2001/04/xmlenc#sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#sha384'
#  'http://www.w3.org/2001/04/xmlenc#sha512'
onelogin.saml2.security.digest_algorithm = http://www.w3.org/2001/04/xmlenc#sha256 

# Reject Signatures with deprecated algorithms (sha1)
onelogin.saml2.security.reject_deprecated_alg = true

# Organization
onelogin.saml2.organization.name = SP Java 
onelogin.saml2.organization.displayname = SP Java Example
onelogin.saml2.organization.url = http://sp.example.com
onelogin.saml2.organization.lang = 

# Contacts
onelogin.saml2.contacts.technical.given_name = Technical Guy
onelogin.saml2.contacts.technical.email_address = technical@example.com
onelogin.saml2.contacts.support.given_name = Support Guy
onelogin.saml2.contacts.support.email_address = support@@example.com
