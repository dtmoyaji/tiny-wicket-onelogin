#  If 'strict' is True, then the Java Toolkit will reject unsigned
#  or unencrypted messages if it expects them signed or encrypted
#  Also will reject the messages if not strictly follow the SAML
onelogin.saml2.strict =  true

# Enable debug mode (to print errors)
onelogin.saml2.debug =  false


#  Service Provider Data that we are deploying
#

#  Identifier of the SP entity  (must be a URI)
onelogin.saml2.sp.entityid = http://localhost:8080/java-saml-tookit-jspsample/metadata.jsp

# Specifies info about where and how the <AuthnResponse> message MUST be
#  returned to the requester, in this case our SP.
# URL Location where the <Response> from the IdP will be returned
onelogin.saml2.sp.assertion_consumer_service.url = http://localhost:8080/java-saml-tookit-jspsample/acs.jsp

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-POST binding only
onelogin.saml2.sp.assertion_consumer_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST

# Specifies info about where and how the <Logout Response> message MUST be
# returned to the requester, in this case our SP.
onelogin.saml2.sp.single_logout_service.url = http://localhost:8080/java-saml-tookit-jspsample/sls.jsp

# SAML protocol binding to be used when returning the <LogoutResponse> or sending the <LogoutRequest>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Specifies constraints on the name identifier to be used to
# represent the requested subject.
# Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress

# Usually x509cert and privateKey of the SP are provided by files placed at
# the certs folder. But we can also provide them with the following parameters

onelogin.saml2.sp.x509cert = MIIC8TCCAdkCBgF//PwtHTANBgkqhkiG9w0BAQsFADA8MTowOAYDVQQDDDFodHRwOi8vbG9jYWxob3N0OjgwODAvamF2YS1zYW1sLXRvb2tpdC1qc3BzYW1wbGUvMB4XDTIyMDQwNjAzNDU1OVoXDTMyMDQwNjAzNDczOVowPDE6MDgGA1UEAwwxaHR0cDovL2xvY2FsaG9zdDo4MDgwL2phdmEtc2FtbC10b29raXQtanNwc2FtcGxlLzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJs2Ec9JTfcj7wugfclDvJ2JRrgQRE8QiLEp7tBRwSLN4QqPw6q3iIzA9FFyLkhjnNkRsQ5NHp2AJitgdkHiNGHjyEWbY7G/V5BIG8nQanIKUIrlWlB9OsO0vtnryDOdNGsEt7/7Kf+Go+Y1gmNRR0JzAHA85TOxR0gT2lbGJbk0Mavr1JP1vW42PG67X1bQHMgdmCWm2529JvpOf9H6lbCSYctUUCuW6Xf6HGsYriIMGeq2wy2MVmb1diVdOinyDPUgUwwSrIGCNpIok4Jx2a7dwEaymdKW4CMh9qV3XNowzaBHO43KUowLLqQC62CX11DLVSN95tlwfpyGbKuWri8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAe8HAdgJEme9Ovha+OWMlbG8ZieNuVKrZWyhsog/DqykcO0i6mEdqURNY48XESVtmaZHjCqVopocPNGbScfOUAkfxnd3a6sigd1pcVVy/6x9UEndQp316J/OWiHJzV9Ylp7ufGix3Y3J9NGortj1sPipEw5ZZs7XXkNGa0Xs0SKIFaoKBJ08fB3JhnmRF+dwBHRrwV96VQJP/x7aGmUBY+JJJITJUz+8nLfmfBpG+j5nORnKclygXMo1YJ0ozNvbj0WMuDuL4GhY5lKZ8xWv/q3WO3CgCcAqhjC+yUgq80TtRnc9lhfSyCaZ8cx4bLxUMZx0omcmVxrh2zRRZJ81f7A==

# Requires Format PKCS#8   BEGIN PRIVATE KEY	     
# If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem
onelogin.saml2.sp.privatekey = MIIEpAIBAAKCAQEAmzYRz0lN9yPvC6B9yUO8nYlGuBBETxCIsSnu0FHBIs3hCo/DqreIjMD0UXIuSGOc2RGxDk0enYAmK2B2QeI0YePIRZtjsb9XkEgbydBqcgpQiuVaUH06w7S+2evIM500awS3v/sp/4aj5jWCY1FHQnMAcDzlM7FHSBPaVsYluTQxq+vUk/W9bjY8brtfVtAcyB2YJabbnb0m+k5/0fqVsJJhy1RQK5bpd/ocaxiuIgwZ6rbDLYxWZvV2JV06KfIM9SBTDBKsgYI2kiiTgnHZrt3ARrKZ0pbgIyH2pXdc2jDNoEc7jcpSjAsupALrYJfXUMtVI33m2XB+nIZsq5auLwIDAQABAoIBAApIfMmU+7tiABZvHaZV/IsbazoKqdvrJoNGWfInWHpr1XsTp00KN9vLdORogjR9lQi0qVxfM6YPtXeuPmeDCyFpK/2gm+xM1wpSHLU0P7kqgceSBnfKtDf/I53ghzUUN0LX3yyzAUdSrk00Ql0+J1B5ug+1mSHhnu1hk1eobRtmBWCyoFcJXONwRGXoHbgABeA7Lqbzy8fBgFhlGNzJ509kU/S+qhDK1vVc+KQLyyhptcZQLu8WlGCx3Rl3DwcvHAf27RSizrvGdzkXqSEiL3zx0QdgcRznu+jWTfpgerHuVncpxZwoWCrHS9MTzpidDD5T2kgLbdf90W9ntEZrJsECgYEA1mgu0WFxKBMhzgHzttpOdfmUMvfUCuDvfBqgdifSh8q4auKW/O8rYavj3oAt1Mlqs5iejaMF494dOZJzCU89miJfU2rd5kuW4k4WTxP4MMZmTTQza/AHiZOC7/zwFeY03VCk3yb+UkRd+CP7xccJShpKQkT/nzhew+a/en+xQR8CgYEAuVIfxD++A4/WxRWbsmJ2OInYlYR3gO71/U33TwHXoN2AJj+5+cSuDQhY3YTGV2NtgTRht2lrPWV0fXfm+lykdTx4TKfvHzRQzDbuK9uW/BdwYEDAehk5U+7i5hKgrysb3wGtKe/R/uqrwyd+Q2iGIQBBmRDcgLxUCHa94plboPECgYEAwZVnUB0OsgQ0LXCNv7bzyIkDSdGBXiEhmYfhAU2LRJfAUqErekvne1RbdXV96/W/pVBTN8bNdqQA9w5HV0x4bkZCk2qV12zAWqvucI+zMzau/132X6pk486QFmblzp//cyNw+RqX3WdlALpchIHk3UdHbPYnZnba+T3J/Kx2OjkCgYAwc0YW2stkxwBRenrAQnnCAlf7jyxnKxJo7S9RGpwzVHWiilqm8ELI6XvCPmpUgowokXdSql79KD8yZlye7AWbGPoioG0l7VmKanoOQVTSB5a7s3Ie+eVBCl2L5SbZZR3eSePp6OcwDE5nsTWTjgozKov75qqfhZ06sUCns4x/IQKBgQCKNi9fOsaIulRThCjrltI5wPqP+KFTjoRIhrUt4k4fypGV5c4nd1p0UwhCO7yAebnpu/j6ugd2CJk4bmm0QZGMXiteUVswbPQMkDEf61KKSa0id4zyWlJd/pSodoTLpwyblpsAC0V3xtIDrj7mO3uzkKzXi2e09qpTjp/LOKA57g==

# Identity Provider Data that we want connect with our SP
#

# Identifier of the IdP entity  (must be a URI)
# KEYCLOAK SIDE URL
onelogin.saml2.idp.entityid = https://kc.date-yakkyoku.net/realms/acme

# SSO endpoint info of the IdP. (Authentication Request protocol)
# URL Target of the IdP where the SP will send the Authentication Request Message
# KEYCLOAK SIDE URL
onelogin.saml2.idp.single_sign_on_service.url = https://kc.date-yakkyoku.net/realms/acme/protocol/saml

# SAML protocol binding to be used to deliver the <AuthnRequest> message 
# to the IdP.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_sign_on_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# SLO endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Request
# KEYCLOAK SIDE URL
onelogin.saml2.idp.single_logout_service.url =  https://kc.date-yakkyoku.net/realms/acme/protocol/saml

# Optional SLO Response endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Response. If left blank, same URL as onelogin.saml2.idp.single_logout_service.url will be used.
# Some IdPs use a separate URL for sending a logout request and response, use this property to set the separate response url
#onelogin.saml2.idp.single_logout_service.response.url = http://localhost:8080/java-saml-tookit-jspsample/sls.jsp
onelogin.saml2.idp.single_logout_service.response.url = 

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Public x509 certificate of the IdP
onelogin.saml2.idp.x509cert = MIIClzCCAX8CBgGEWsP1wDANBgkqhkiG9w0BAQsFADAPMQ0wCwYDVQQDDARhY21lMB4XDTIyMTEwOTA1MDAwMloXDTMyMTEwOTA1MDE0MlowDzENMAsGA1UEAwwEYWNtZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANgUBiEmT10gqWfYndVMUgQwxS12J0UFN4j1GdklPW6XgfYtBRkxD95fnQm3+F00BmsJHBGsi5/ux3K5EXcyVdgs/+fvLa4WKG1s6itK7zSQKIUzHh8/HMXaVCunwD/6d6d1NCsQ3bFOqvULLKnknbuTHRxBGcS9/P/B1FvSSPULehcFV3t4VOqW1CA3/r/1q0xZu1IUxQ2o4uPeZ2Mpda0fpJ3oSX9xSeP34nCZtU4rOm+iQe7PB2b2TVD0BfeGWlE77pGijGVQKhLsm0l5qmN5DFID9RNpdACG5A4iCZn0ySV9H+mVvMcMzksGakoy3VxvVeb28/+U/xXrB90yh7ECAwEAATANBgkqhkiG9w0BAQsFAAOCAQEA1IPubJGgmA89DQcm5oMKuBwTg6wIbeSXTz73jnEnVE3h5hFX/vPrFshSPK6C+hb2ZJ2C34HX7ic6ZkfaOm1Z68j4PVFQJ4dxb+ftL8I25DkfkUjSpnxhB9YIBZsM0DPTodK/4O8o0/Wk2o8OXNwOSIyKZIXJmqUy+a4Yx1wK/MrkOPC3O+6AAp9znWV5feQ0Wq+iq4IJV3xbEeyhmvSCq0J8ngL2ksXHhYvUuHGK86DLzOUbJs+8+nMBCyCdpAM6PDVKwANwLPwkNXHFBgc3fgw6Pncpv8XIQCjl5yTeH60LCxPaEWCJs+w+P0Kq4/RLep6ug8ZjYTrxyvZ/ohLFRA==

# Instead of use the whole x509cert you can use a fingerprint
# (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
# or add for example the -sha256 , -sha384 or -sha512 parameter)
#
# If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to
# let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
# 'sha1' is the default value.
#onelogin.saml2.idp.certfingerprint = 
#onelogin.saml2.idp.certfingerprint_algorithm = sha256


# Security settings
#

# Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
# will be encrypted.
onelogin.saml2.security.nameid_encrypted = false

# Indicates whether the <samlp:AuthnRequest> messages sent by this SP
# will be signed.              [The Metadata of the SP will offer this info]
onelogin.saml2.security.authnrequest_signed = false
#onelogin.saml2.security.authnrequest_signed = true

# Indicates whether the <samlp:logoutRequest> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutrequest_signed = false

# Indicates whether the <samlp:logoutResponse> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutresponse_signed = false

# Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
# <samlp:LogoutResponse> elements received by this SP to be signed.
onelogin.saml2.security.want_messages_signed = false

# Indicates a requirement for the <saml:Assertion> elements received by this SP to be signed.
onelogin.saml2.security.want_assertions_signed = false

# Indicates a requirement for the Metadata of this SP to be signed.
# Right now supported null (in order to not sign) or true (sign using SP private key) 
onelogin.saml2.security.sign_metadata =

# Indicates a requirement for the Assertions received by this SP to be encrypted
onelogin.saml2.security.want_assertions_encrypted = false

# Indicates a requirement for the NameID received by this SP to be encrypted
onelogin.saml2.security.want_nameid_encrypted = false

# Authentication context.
# Set Empty and no AuthContext will be sent in the AuthNRequest
# You can set multiple values (comma separated them)
onelogin.saml2.security.requested_authncontext = urn:oasis:names:tc:SAML:2.0:ac:classes:Password

# Allows the authn comparison parameter to be set, defaults to 'exact'
onelogin.saml2.security.onelogin.saml2.security.requested_authncontextcomparison = exact

# Allows duplicated names in the attribute statement
onelogin.saml2.security.allow_duplicated_attribute_name = false

# Indicates if the SP will validate all received xmls.
# (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).
onelogin.saml2.security.want_xml_validation = true

# Algorithm that the toolkit will use on signing process. Options:
#  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
#  'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
onelogin.saml2.security.signature_algorithm = http://www.w3.org/2001/04/xmldsig-more#rsa-sha256

# Algorithm that the toolkit will use on digest process. Options:
#  'http://www.w3.org/2000/09/xmldsig#sha1'
#  'http://www.w3.org/2001/04/xmlenc#sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#sha384'
#  'http://www.w3.org/2001/04/xmlenc#sha512'
onelogin.saml2.security.digest_algorithm = http://www.w3.org/2001/04/xmlenc#sha256 

# Reject Signatures with deprecated algorithms (sha1)
onelogin.saml2.security.reject_deprecated_alg = true
#onelogin.saml2.security.reject_deprecated_alg = false

# Organization
onelogin.saml2.organization.name = SP Java 
onelogin.saml2.organization.displayname = SP Java Example
onelogin.saml2.organization.url = http://sp.example.com
onelogin.saml2.organization.lang = 

# Contacts
onelogin.saml2.contacts.technical.given_name = Technical Guy
onelogin.saml2.contacts.technical.email_address = technical@example.com
onelogin.saml2.contacts.support.given_name = Support Guy
onelogin.saml2.contacts.support.email_address = support@@example.com
