onelogin.saml2.strict =  true
onelogin.saml2.debug =  false


# Identifier of the SP entity  (must be a URI)
# Keycloak\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u540d\u79f0\u3068\u3053\u306e\u5024\u3092\u305d\u308d\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002
onelogin.saml2.sp.entityid = http://localhost:8080/wicket-onelogin-impl

# Specifies info about where and how the <AuthnResponse> message MUST be
#  returned to the requester, in this case our SP.
# URL Location where the <Response> from the IdP will be returned
# keycloak \u306eACS\u306b\u3082\u540c\u3058\u5024\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u3002
onelogin.saml2.sp.assertion_consumer_service.url = http://localhost:8080/wicket-onelogin-impl/SamlLogin

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-POST binding only
onelogin.saml2.sp.assertion_consumer_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST

# Specifies info about where and how the <Logout Response> message MUST be
# returned to the requester, in this case our SP.
# IDP\u3067\u30ed\u30b0\u30a2\u30a6\u30c8\u5f8c\u3001\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u308b\u30da\u30fc\u30b8
onelogin.saml2.sp.single_logout_service.url = http://localhost:8080/wicket-onelogin-impl/

# SAML protocol binding to be used when returning the <LogoutResponse> or sending the <LogoutRequest>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Specifies constraints on the name identifier to be used to
# represent the requested subject.
# Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress

# Usually x509cert and privateKey of the SP are provided by files placed at
# the certs folder. But we can also provide them with the following parameters

onelogin.saml2.sp.x509cert = MIIDETCCAfkCFCD6dIfHQFMxvqRDXN91fE4Gf23bMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwHhcNMjIxMjA1MDA1MzAxWhcNMzIxMjAyMDA1MzAxWjBFMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqIysb2aJuqoVc/PcKtXPAQypCc23aRuEXUWdp0nOpbiAmO5YBujEHyyX5V/IOj1xskcJHq8wensCRmoDnCwMN7LLFz6cPEw9/kLv07HhcwIRv/dA02UNh4MhiNHAKlPcpa5Q8LWHs1TBP9zjc82mHBKcEN41KPuRIqHt1jkOvk6IUvhCBm9Df9CLqABB3s/5lvCfwXntLAwgcPgAWPUmmW147lTWq/gJ8wyIqPlM2lSLfexgo23ekOjm/02TOOLJWbTMxpDVocFKenFUPZFfGZwz07jvx3/mSP7Gjt7Pbkd5keu8suSQHTI1TjC0Y+/p8hhg9iQHvlWoCSb9EUfghwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAoQZrZNXe/LptF9Jmul2h9LOR2jsa82kqILdKzKFBWWcglZeIXF/tDlqipScH9/NLFsUE+YeDFsPh3bXg7WcXyXun94btUUcGUn7EKueOL6iQIMylzPEmCntr0Njkfp71hu4xzscfZhk6Rn5skR8zFAAMkGq0F/dcleMmWE7Ssv1vziGGXco2EBo8ciypdibBnTFWudxNGcRiy2Ui7cpEAQQvzyYUJ/LKNrIx7NQSL9UQ/Ry/vD09ny44lxJP1cGpyH3n/KDomtmy9hqtS2qO51cPaGIKVtL6OBUHyu/h2fDOek34/5/mQpVJgrdkXMH3yq9usmYFw+UYDaBMgDHp7

# Requires Format PKCS#8   BEGIN PRIVATE KEY	     
# If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem
onelogin.saml2.sp.privatekey = MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCojKxvZom6qhVz89wq1c8BDKkJzbdpG4RdRZ2nSc6luICY7lgG6MQfLJflX8g6PXGyRwkerzB6ewJGagOcLAw3sssXPpw8TD3+Qu/TseFzAhG/90DTZQ2HgyGI0cAqU9ylrlDwtYezVME/3ONzzaYcEpwQ3jUo+5Eioe3WOQ6+TohS+EIGb0N/0IuoAEHez/mW8J/Bee0sDCBw+ABY9SaZbXjuVNar+AnzDIio+UzaVIt97GCjbd6Q6Ob/TZM44slZtMzGkNWhwUp6cVQ9kV8ZnDPTuO/Hf+ZI/saO3s9uR3mR67yy5JAdMjVOMLRj7+nyGGD2JAe+VagJJv0RR+CHAgMBAAECggEANRqxX53+af4ZqUFdjm9z+6AqCCk1Dtw5HYwICoOiJKuXdNevi2m+FRZfO0ks1FC0qFdiQ7UtwIFOK7JONd/Y75mZDFdRMVxSMfCUEG5cmng98G4uEgymMRp7L9jqQ0vN2rOr09NWEIX1JzJoxX03R2QDoPrp4+IzDabYQSUUBJhE99nD51tuTC1FCOZ6WmcJ1m6HxQSpuU4mkoIn/nZ1LhA2LCUTAgtfwWmHJYkCJp8J9Idfj4CTvAellGRW4x2LMsOhcK2SOePLFGBA2P0Zs5mfXdFOQKJwg8qVFWqwPO049upG1RohYJHnMpu4xJRyG2+LsepcozgjJVf9iZ4qZQKBgQDoh80QOtD1fWGofa8GPnPtqcOvF4S3vOwYuxxjRGthGIAr4Im4koTRce45KtvzG57Fv1lCMdtEL5AfVd/zRYtlyOESjhSXv+9hlyr/m9gK+o0cQjx/d40DE6R1/G8rZ0esM6n0F4rU8HfK7htp4Ib4osBOGvQKxyjwlUVVQ3KJqwKBgQC5j7YUdDoaKnvqP6dzngLwcMNn5qjFp3aR1Am3K5rw4kotelwPhitoZoVshZHzjx/K/oA5KBtM52OiDVHjFH6U0B1gC9PdoXlgQoF8H18/pL+rwY6jWwe7n/ybJV4YfIn165qAJ4qSxGVE292hvetsSYCwGCEMQ35Kd+P5splAlQKBgQCpq02J5iDKv+4eT3cCi1dzt0e93t9MYmGzufQAys+/TW1YlsJnFyIq4YL927QaM7EqgXDTyCVCH6J9+t8qVzhb0LPKIjoMcFRvVSpe0IxXlnKYiAw0xjryX8bFAKjtdrLph9ke7n6y2bPPMuZ13wsdKURAuZIQuzm4MnMgv9I3eQKBgBQGDf/nCt4H95cvh0JSqr6HbI6ptUye5YyW9PVvHykfQiHmMkj6kXSSm5M6VqWRrDybefqw+UEzNu0lwtBeRcqJKqJSpGomIpLgmlhqijyz6nr+SAYYrJzyhq+3OJAr4DdJVUK/AZUU3Fix4RizBdSJmflmoSpRni8rAM7RFviBAoGAU2PvwCW6dpEkBsd1aB1Z1izTatl5AWJ/S0uThHZPS3FUy3SJ7DDWahgk53Pw3Fk57KYgkytbMH0P89BuxrH9hrZc7yUY/UlEpoJ+CC5yFy1+ljUOhbLLMFaDyQLzTERbG/CNt5dK3X28i4YhZZdMJnT9QppEydLWtnsdOe300g4=

# Identity Provider Data that we want connect with our SP
#

# Identifier of the IdP entity  (must be a URI)
# KEYCLOAK SIDE URL
onelogin.saml2.idp.entityid = https://kc.date-yakkyoku.net/realms/acme

# SSO endpoint info of the IdP. (Authentication Request protocol)
# URL Target of the IdP where the SP will send the Authentication Request Message
# KEYCLOAK SIDE URL
onelogin.saml2.idp.single_sign_on_service.url = https://kc.date-yakkyoku.net/realms/acme/protocol/saml

# SAML protocol binding to be used to deliver the <AuthnRequest> message 
# to the IdP.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_sign_on_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# SLO endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Request
# KEYCLOAK SIDE URL
onelogin.saml2.idp.single_logout_service.url =  https://kc.date-yakkyoku.net/realms/acme/protocol/saml

# Optional SLO Response endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Response. If left blank, same URL as onelogin.saml2.idp.single_logout_service.url will be used.
# Some IdPs use a separate URL for sending a logout request and response, use this property to set the separate response url
#onelogin.saml2.idp.single_logout_service.response.url = http://localhost:8080/java-saml-tookit-jspsample/sls.jsp
onelogin.saml2.idp.single_logout_service.response.url = 

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Public x509 certificate of the IdP
onelogin.saml2.idp.x509cert = MIIClzCCAX8CBgGEWsP1wDANBgkqhkiG9w0BAQsFADAPMQ0wCwYDVQQDDARhY21lMB4XDTIyMTEwOTA1MDAwMloXDTMyMTEwOTA1MDE0MlowDzENMAsGA1UEAwwEYWNtZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANgUBiEmT10gqWfYndVMUgQwxS12J0UFN4j1GdklPW6XgfYtBRkxD95fnQm3+F00BmsJHBGsi5/ux3K5EXcyVdgs/+fvLa4WKG1s6itK7zSQKIUzHh8/HMXaVCunwD/6d6d1NCsQ3bFOqvULLKnknbuTHRxBGcS9/P/B1FvSSPULehcFV3t4VOqW1CA3/r/1q0xZu1IUxQ2o4uPeZ2Mpda0fpJ3oSX9xSeP34nCZtU4rOm+iQe7PB2b2TVD0BfeGWlE77pGijGVQKhLsm0l5qmN5DFID9RNpdACG5A4iCZn0ySV9H+mVvMcMzksGakoy3VxvVeb28/+U/xXrB90yh7ECAwEAATANBgkqhkiG9w0BAQsFAAOCAQEA1IPubJGgmA89DQcm5oMKuBwTg6wIbeSXTz73jnEnVE3h5hFX/vPrFshSPK6C+hb2ZJ2C34HX7ic6ZkfaOm1Z68j4PVFQJ4dxb+ftL8I25DkfkUjSpnxhB9YIBZsM0DPTodK/4O8o0/Wk2o8OXNwOSIyKZIXJmqUy+a4Yx1wK/MrkOPC3O+6AAp9znWV5feQ0Wq+iq4IJV3xbEeyhmvSCq0J8ngL2ksXHhYvUuHGK86DLzOUbJs+8+nMBCyCdpAM6PDVKwANwLPwkNXHFBgc3fgw6Pncpv8XIQCjl5yTeH60LCxPaEWCJs+w+P0Kq4/RLep6ug8ZjYTrxyvZ/ohLFRA==

# Instead of use the whole x509cert you can use a fingerprint
# (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
# or add for example the -sha256 , -sha384 or -sha512 parameter)
#
# If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to
# let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
# 'sha1' is the default value.
#onelogin.saml2.idp.certfingerprint = 
#onelogin.saml2.idp.certfingerprint_algorithm = sha256


# Security settings
#

# Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
# will be encrypted.
onelogin.saml2.security.nameid_encrypted = false

# Indicates whether the <samlp:AuthnRequest> messages sent by this SP
# will be signed.              [The Metadata of the SP will offer this info]
onelogin.saml2.security.authnrequest_signed = false
#onelogin.saml2.security.authnrequest_signed = true

# Indicates whether the <samlp:logoutRequest> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutrequest_signed = false

# Indicates whether the <samlp:logoutResponse> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutresponse_signed = false

# Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
# <samlp:LogoutResponse> elements received by this SP to be signed.
onelogin.saml2.security.want_messages_signed = false

# Indicates a requirement for the <saml:Assertion> elements received by this SP to be signed.
onelogin.saml2.security.want_assertions_signed = false

# Indicates a requirement for the Metadata of this SP to be signed.
# Right now supported null (in order to not sign) or true (sign using SP private key) 
onelogin.saml2.security.sign_metadata =

# Indicates a requirement for the Assertions received by this SP to be encrypted
onelogin.saml2.security.want_assertions_encrypted = false

# Indicates a requirement for the NameID received by this SP to be encrypted
onelogin.saml2.security.want_nameid_encrypted = false

# Authentication context.
# Set Empty and no AuthContext will be sent in the AuthNRequest
# You can set multiple values (comma separated them)
onelogin.saml2.security.requested_authncontext = urn:oasis:names:tc:SAML:2.0:ac:classes:Password

# Allows the authn comparison parameter to be set, defaults to 'exact'
onelogin.saml2.security.onelogin.saml2.security.requested_authncontextcomparison = exact

# Allows duplicated names in the attribute statement
onelogin.saml2.security.allow_duplicated_attribute_name = false

# Indicates if the SP will validate all received xmls.
# (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).
onelogin.saml2.security.want_xml_validation = true

# Algorithm that the toolkit will use on signing process. Options:
#  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
#  'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
onelogin.saml2.security.signature_algorithm = http://www.w3.org/2001/04/xmldsig-more#rsa-sha256

# Algorithm that the toolkit will use on digest process. Options:
#  'http://www.w3.org/2000/09/xmldsig#sha1'
#  'http://www.w3.org/2001/04/xmlenc#sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#sha384'
#  'http://www.w3.org/2001/04/xmlenc#sha512'
onelogin.saml2.security.digest_algorithm = http://www.w3.org/2001/04/xmlenc#sha256 

# Reject Signatures with deprecated algorithms (sha1)
onelogin.saml2.security.reject_deprecated_alg = true
#onelogin.saml2.security.reject_deprecated_alg = false

# Organization
onelogin.saml2.organization.name = SP Java 
onelogin.saml2.organization.displayname = SP Java Example
onelogin.saml2.organization.url = http://sp.example.com
onelogin.saml2.organization.lang = 

# Contacts
onelogin.saml2.contacts.technical.given_name = Technical Guy
onelogin.saml2.contacts.technical.email_address = technical@example.com
onelogin.saml2.contacts.support.given_name = Support Guy
onelogin.saml2.contacts.support.email_address = support@@example.com
